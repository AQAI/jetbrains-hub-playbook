---
- name: Set Server Facts
  set_fact:
    ec2_server_name: "{{ application_name }}-server-{{servers.tooling_zone}}"
    ec2_instance_type: "{{ servers.ec2_instance_type | default('t2.medium') }}"

- debug:
    var: servers
    verbosity: 3

- name: Create EC2 hosts
  ec2:
    region: '{{ aws_region }}'
    key_name: '{{ aws_key_name }}'
    vpc_subnet_id: '{{ item.1.id }}'
    group_id: '{{ aws_security_group_id }}'
    image: '{{ ec2_ami_id }}'
    instance_type: '{{ ec2_instance_type }}'
    instance_profile_name: '{{ ec2_iam_instance_role_name }}'
    assign_public_ip: no
    ebs_optimized: '{{ ebs_optimized | default(False) }}'
    volumes:
      - device_name: /dev/sda1
        volume_size: '{{ ec2_volume_size }}'
        delete_on_termination: true
    instance_tags:
      Name: '{{ ec2_server_name }}'
      controlled-by: Ansible
      created-at: '{{ ansible_date_time.iso8601 }}'
      tooling-environment: '{{ tooling_environment }}'
      tooling-placement: '{{ item.1.availability_zone }}'
      roles: '{{ servers.role }}'
      os: xenial
    exact_count: '{{ servers.instance_count }}'
    count_tag:
      Name: '{{ ec2_server_name }}'
      tooling-environment: '{{ tooling_environment }}'
      tooling-placement: '{{ item.1.availability_zone }}'
      roles: '{{ servers.role }}'
      os: xenial
    zone: '{{ item.1.availability_zone }}'
  with_subelements:
    - '{{ aws_subnets.results}}'
    - subnets
  register: ec2
  when: aws_vpc_id is defined

- debug:
    var: ec2
    verbosity: 3

- name: Register Hosts for the Play
  add_host:
    name: '{{ item.1.private_ip }}'
    instance_id: '{{ item.1.id }}'
    aws_region: '{{ aws_region }}'
    ansible_python_interpreter: /usr/bin/python2.7 # This is required as xenial does not have a python 2 installation by default, we install this
    ansible_user: ubuntu
    become_user: root
    groups: my_app_servers
  with_subelements:
    - '{{ ec2.results }}'
    - tagged_instances
  when: aws_vpc_id is defined

- name: Register Server with ELB
  ec2_elb:
    region: '{{ aws_region }}'
    ec2_elbs: '{{ app_elb.elb.name }}'
    instance_id: '{{ item.1.id }}'
    wait: no
    state: present
  with_subelements:
    - '{{ ec2.results }}'
    - tagged_instances
  when: aws_vpc_id is defined
